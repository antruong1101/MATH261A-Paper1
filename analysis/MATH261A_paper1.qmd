---
title: "Temporal Patterns in Police Call Prioritization"
author: "An Truong"
format: pdf
editor: visual
date: "September 24, 2025"
---

## Date: September 24, 2025

## Abstract

## Introduction

Contacting emergency personnel through dialing 911 has allowed direct contact to police, fire, and EMS services in times of critical need. This allows the emergency personnel to quickly be dispatched to provide life-saving services and/or instructions. Once called, data from the call is documented and stored in records that shows information on the call such as date, time, and where an offense took place for example. To rate on how urgent or dire an offense is, priority is rated on a numerical scale to represent this, where one is critical, imminent danger to life and six is a traffic jam. In this paper, the aim is to address the relationship between the priority of an offense and the time of day that the offense occurred.

The goals is to see

## Data

The study uses the Police Calls for Service dataset(s) that comes from the San Jos√© Open Data website. In obtaining the variables of interest, the priority code and time of day were extracted as columns, where the offense date was represented in 24-hour time to better represent the time for the simple linear regression model.

```{r, message = FALSE, warning = FALSE}

library(tidyverse)
library(hms)
library(usethis)
use_git_config(user.name = "antruong1101", user.email = "an.truong8@gmail.com")
```

```{r}
# download Police Calls 2024 csv file
setwd('/Users/antruong/Downloads/MATH261A/MATH261A-Paper1/data')
pc_2024 <- read_csv('police_calls_2024.csv')
```

```{r}
pc_2024_df <- pc_2024 %>% 
  select(PRIORITY, OFFENSE_TIME) %>%
  mutate(PRIORITY = as.numeric(PRIORITY),
         OFFENSE_TIME = hour(as_hms(OFFENSE_TIME))) %>%
  filter(PRIORITY <= 6)
summary(pc_2024_df)
```

From calculating the frequencies for each priority code and plotting them with time of day we can see the trends for each code throughout the day. The multifaceted bar plots illustrates the frequency of calls for each priority code, where we can see a trend from priority codes 2 and 3 that have a similar distributions in calls. For those two priority codes, we can also see that they hold up as a majority of the calls throughout the day compared to the most critical priority code 1, which has less calls but tend to pick up in the evening to night time from 8 p.m. to 10 p.m.

```{r}
# create frequency table
freq_table <- pc_2024_df %>%
  group_by(OFFENSE_TIME, PRIORITY) %>%
  summarise(count = n(), .groups = 'drop')

# convert PRIORITY to factor for better plotting
freq_table$PRIORITY <- as.factor(freq_table$PRIORITY)
```

```{r}
priority_freq <- ggplot(freq_table, aes(x = OFFENSE_TIME, y = count, fill = PRIORITY)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ PRIORITY, ncol = 2, scales = "free_y") +
  scale_x_continuous(breaks = seq(0, 23, by = 4)) +
  labs(title = "Police Call Frequencies by Hour for Each Priority Code",
       x = "Hour of Day",
       y = "Number of Calls") +
  theme_minimal() +
  theme(legend.position = "none")

print(priority_freq)

```

```{r}
priority_freq_hr <- ggplot(freq_table, aes(x = OFFENSE_TIME, y = count, color = PRIORITY, group = PRIORITY)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  scale_x_continuous(breaks = 0:23, labels = 0:23) +
  scale_color_brewer(palette = "RdYlBu", direction = -1) +
  labs(title = "Frequency of Police Call Priorities by Hour of Day in 2024",
       x = "Hour of Day",
       y = "Number of Calls",
       color = "Priority Code") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

print(priority_freq_hr)
```

## Methods

The simple linear regression model with the dependent variable PRIORITY and the independent variable OFFENSE_TIME can be modeled as:

$$
Y_i = \beta_0 + \beta_1X_i + \epsilon_i
$$

where:

-   $Y_i$ is the priority code of the i-th call

-   $\beta_0$ is the intercept, the expected priority code when it is midnight (OFFENSE_TIME = 0)

-   $\beta_1$ is the regression coefficient, how much the expected priority code will change as x increases by one hour

-   $X_i$ is the time of day for the i-th call

-   $\epsilon_i$ is the error of estimate

```{r}
# linear model does not apply, because cyclical pattern
priority_lm <- lm(PRIORITY~OFFENSE_TIME, data=pc_2024_df)
summary(priority_lm)
```

```{r}
ggplot(pc_2024_df, aes(x = OFFENSE_TIME, y = PRIORITY)) + 
  geom_jitter(alpha = 0.6, size = 2, color = 'steelblue', width = 0.2, height = 0.2) +
  #geom_point(alpha = 0.6, size = 2, color = "steelblue") +
  geom_smooth(method = 'lm', se = TRUE, color = 'red', linetype = 'solid') + 
  labs(title = 'Scatterplot with Regression Line (Jittered)', x = 'OFFENSE_TIME(24hr time)', y = 'PRIORITY(1-6)') + theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
  
```

Upon fitting a simple linear regression model in R, we can interpret the coefficients of having an intercept of approximately 3.17 when it is midnight (OFFENSE_TIME = 0) and a slope of approximately 0.0034, which can be interpreted as the increase in the expected priority code for a one hour increase in the day. Although the model suggest significant coefficients with low p-values, observing a low adjusted-$R^2$ value of 0.000294 tells us that the data does not fit the model well. It is more evident when the plot with the regression line is plotted and it can be observed that the regression line is close to 0 and does not explain the data well either.

Since the OFFENSE_TIME is cyclical, it cannot be modeled with a simple linear regression model. The linear nature of the simple regression model could not account for the "wrap-around" from 11 p.m. to 12 a.m.

## Result

```{r}
#dim(pc_2024_df)

residuals <- residuals(priority_lm)
fitted_values <- fitted(priority_lm)

set.seed(420)
sample_size <- 5000
sample_idx <- sample(length(residuals), sample_size)

plot(fitted_values[sample_idx], residuals[sample_idx],
     pch = 20,
     cex = 0.5, 
     col = alpha('blue', 0.6),
     xlab = 'Fitted Values',
     ylab = 'Residuals',
     main = 'Residual Plot')
abline(h = 0, col = 'red', lty = 2, lwd = 2)

lines(lowess(fitted_values[sample_idx], residuals[sample_idx]),
      col = 'green', lwd = 2)
```

```{r}
res <- residuals(priority_lm)
qqnorm(res)
qqline(res, col = 'red')
```
